import { generate } from 'ts-to-zod';
import fs from 'fs';
import slash from 'slash';
import { join, parse, relative } from 'path';
import { globSync } from 'glob';
import { execSync } from 'child_process';

/**
 * Generates the inputOutputConfig array based on the provided glob pattern.
 * @param {string} pattern - The glob pattern to find TypeScript files.
 * @returns {Array<{ input: string, output: string }>}
 */
const generateInputOutputConfig = (pattern) => {
  const files = globSync(pattern, {
    ignore: ['**/*.zod.ts', '**/index.ts'],
  });
  return files.map((file) => {
    const output = file.replace(/\.ts$/, '.zod.ts');
    return { input: file, output };
  });
};

const inputOutputConfig = generateInputOutputConfig(
  'src/schema/generated/**/*.ts'
);

/**
 *
 * @param {string} from
 * @param {string} to
 * @returns
 */
export function getImportPath(from, to) {
  const relativePath = slash(relative(from, to).slice(1));
  const { dir, name } = parse(relativePath);

  return `${dir}/${name}`;
}

/**
 *
 * @param {string} inputPath
 * @param {string} outputPath
 */
const generateSchemaFile = (inputPath, outputPath) => {
  const sourceText = fs.readFileSync(inputPath, 'utf8');

  const relativeIOMappings = inputOutputConfig.map((io) => {
    const relativeInput = getImportPath(inputPath, io.input);
    const relativeOutput = getImportPath(outputPath, io.output);

    return {
      input: relativeInput,
      output: relativeOutput,
    };
  });

  const {
    getZodSchemasFile,
    getIntegrationTestFile,
    errors,
    hasCircularDependencies,
  } = generate({
    sourceText,
    inputOutputMappings: [
      { input: '@blue-labs/language', output: '@blue-labs/language' },
      ...relativeIOMappings,
    ],
  });

  if (errors.length) {
    console.error(errors);
    process.exit(1);
  }

  if (hasCircularDependencies) {
    console.error('Circular dependencies detected');
  }

  const content = getZodSchemasFile(getImportPath(outputPath, inputPath));

  fs.writeFileSync(outputPath, content);
  execSync(`npx prettier --write ${outputPath}`);
};

for (const { input, output } of inputOutputConfig) {
  const inputPath = join(process.cwd(), input);
  const outputPath = join(process.cwd(), output);

  generateSchemaFile(inputPath, outputPath);
}

/**
 * Generates an index.ts file that exports all modules from inputOutputConfig.
 * @param {Array<{ input: string, output: string }>} config - The input-output configuration array.
 */
const generateIndexFile = (config) => {
  const exportStatements = [
    '// This file was generated by the "generate-schema.mjs" script. Do not edit manually.',
  ];

  config.forEach(({ input, output }) => {
    const inputPath = `./${relative('src/schema/generated', input).replace(
      /\.ts$/,
      ''
    )}`;
    const outputPath = `./${relative('src/schema/generated', output).replace(
      /\.ts$/,
      ''
    )}`;
    exportStatements.push(`export * from '${slash(inputPath)}';`);
    exportStatements.push(`export * from '${slash(outputPath)}';`);
  });

  const indexPath = join('src/schema/generated', 'index.ts');
  fs.writeFileSync(indexPath, exportStatements.join('\n'), 'utf8');
  execSync(`npx prettier --write ${indexPath}`);
};

generateIndexFile(inputOutputConfig);
