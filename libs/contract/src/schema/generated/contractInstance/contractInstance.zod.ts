// Generated by ts-to-zod
import { z } from 'zod';
import {
  ContractInstance,
  ProcessingState,
  ContractInstanceBlueObject,
  ProcessingStateBlueObject,
} from './contractInstance';

import { blueObjectNumberValueSchema } from '@blue-company/language';
import { baseBlueObjectSchema } from '@blue-company/language';
import { contractSchema } from './../contract/contract.zod';

export const contractInstanceSchema: z.ZodSchema<ContractInstance> = z.lazy(
  () =>
    z.object({
      id: z.number(),
      contractState: contractSchema,
      processingState: processingStateSchema,
    })
);

export const processingStateSchema: z.ZodSchema<ProcessingState> = z.lazy(() =>
  z.object({
    startedWorkflowCount: z.number(),
    startedLocalContractCount: z.number(),
    localContractInstances: z.array(contractInstanceSchema).optional(),
  })
);

export const contractInstanceBlueObjectSchema: z.ZodSchema<ContractInstanceBlueObject> =
  z.lazy(() =>
    baseBlueObjectSchema.extend({
      id: blueObjectNumberValueSchema,
      contractState: contractSchema,
      processingState: processingStateBlueObjectSchema,
    })
  );

export const processingStateBlueObjectSchema: z.ZodSchema<ProcessingStateBlueObject> =
  z.lazy(() =>
    baseBlueObjectSchema.extend({
      startedWorkflowCount: blueObjectNumberValueSchema,
      startedLocalContractCount: blueObjectNumberValueSchema,
      localContractInstances: z
        .array(contractInstanceBlueObjectSchema)
        .optional(),
    })
  );
