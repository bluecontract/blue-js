// Generated by ts-to-zod
import { z } from 'zod';

import {
  baseBlueObjectSchema,
  blueObjectSchema,
  blueObjectBooleanValueSchema,
  blueObjectStringValueSchema,
} from '@blue-company/language';
import { workflowStepObjectListSchema } from './../workflowStep/workflowStep.zod';
import { contractEventBlueObjectSchema } from './../contractEvent/contractEvent.zod';
import { timelineEntryBlueObjectSchema } from './../timeline/timelineEntry.zod';

export const participantTypeSchema = blueObjectSchema.and(
  z.object({
    name: z.literal('Participant').optional(),
  })
);

export const participantSchema = baseBlueObjectSchema.extend({
  type: participantTypeSchema.optional(),
  timeline: blueObjectStringValueSchema.optional(),
  thread: blueObjectStringValueSchema.optional(),
  timelineSource: timelineEntryBlueObjectSchema.optional(),
});

export const participantObjectListSchema = baseBlueObjectSchema.extend({
  items: z.array(participantSchema).optional(),
});

export const contractMessagingSchema = baseBlueObjectSchema.extend({
  participants: blueObjectSchema.optional(),
});

export const contractPhotoSchema = blueObjectStringValueSchema;

export const contractsListObjectSchema = blueObjectSchema;

export const workflowSchema = baseBlueObjectSchema.extend({
  steps: workflowStepObjectListSchema.optional(),
  trigger: contractEventBlueObjectSchema.optional(),
});

export const workflowObjectListSchema = baseBlueObjectSchema.extend({
  items: z.array(workflowSchema).optional(),
});

export const contractSchema = baseBlueObjectSchema.extend({
  participants: z.record(participantObjectListSchema).optional(),
  workflows: workflowObjectListSchema.optional(),
  properties: blueObjectSchema.optional(),
  photo: contractPhotoSchema.optional(),
  contracts: contractsListObjectSchema.optional(),
  messaging: contractMessagingSchema.optional(),
});

export const contractChessSchema = contractSchema.extend({
  properties: z.object({
    chessboard: blueObjectStringValueSchema,
    playerToMove: z.object({
      value: z.union([z.literal('White'), z.literal('Black')]),
    }),
    winner: z.object({
      value: z.union([
        z.literal('White'),
        z.literal('Black'),
        z.literal('None'),
      ]),
    }),
    draw: blueObjectBooleanValueSchema,
    gameOver: blueObjectBooleanValueSchema,
  }),
});
