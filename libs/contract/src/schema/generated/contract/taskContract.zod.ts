// Generated by ts-to-zod
import { z } from 'zod';

import {
  baseBlueObjectSchema,
  blueObjectSchema,
  blueObjectStringValueSchema,
} from '@blue-company/language';
import { contractSchema, localContractSchema } from './contract.zod';

export const assistantMessageSchema = baseBlueObjectSchema.extend({
  type: blueObjectSchema
    .and(
      z.object({
        name: z.literal('Assistant Message').optional(),
        blueId: z
          .literal('2Dw47cJMtpB6BhRkA6DkAqrgc3NKFcHHoqwUy9z3Ts1x')
          .optional(),
      })
    )
    .optional(),
  message: blueObjectStringValueSchema.optional(),
  priority: blueObjectStringValueSchema.optional(),
});

export const userMessageSchema = baseBlueObjectSchema.extend({
  type: blueObjectSchema
    .and(
      z.object({
        name: z.literal('User Message').optional(),
      })
    )
    .optional(),
  message: blueObjectStringValueSchema.optional(),
});

export const conversationObjectListSchema = baseBlueObjectSchema.extend({
  type: blueObjectSchema
    .and(
      z.object({
        blueId: z
          .literal('G8wmfjEqugPEEXByMYWJXiEdbLToPRWNQEekNxrxfQWB')
          .optional(),
      })
    )
    .optional(),
  items: z.array(blueObjectSchema).optional(),
});

export const taskContractSchema = contractSchema.extend({
  properties: z.object({
    conversation: conversationObjectListSchema,
    actualTask: localContractSchema,
  }),
});
